# Prepara dados

# Pacotes e configuração ----

library(rio)
library(tidyverse)
library(fst)
library(dplyr)
library(segregation)
library(weights)
library(Hmisc) #medias ponderadas

options(scipen = 999) #notação cientifica


# 1. Abrindo arquivos ----

#Criando vetor anos e objeto com caminho para bases de dados

anos <- c(1980,1991,2000,2010)

for (i in 1: length(anos))
{
  print(i)
  
  ano_i = anos[i]
  
  # 1.1 - Abrindo o  censo ----
  arquivo_i = paste0("\\harmonizedCensusBrazil_", ano_i, ".fst", sep = "")
  arquivo = paste0("\\censo", ano_i, ".fst", sep = "") # 
  
  c = import(paste0(wd, arquivo_i),
             columns = c("year",
                         "wgtperson",
                         "male",
                         "race", 
                         "age", 
                         "levelattnd", 
                         "educationAttainment",
                         "fieldsOfStudyAggreg",
                         "occupationalStatus", 
                         "classWorker", 
                         "isco88",
                         "MainJobIncome2010Values"))
                         
  # 1.2 - Recodificando variaveis ---- 
  c <- c %>%
  rename ("ano" = year,
          "peso" = wgtperson,
          "sexo" = male, 
          "raça" = race, 
          "idade" = age, 
          "estudo" = levelattnd,
          "educ" = educationAttainment,
          "areadeestudo" = fieldsOfStudyAggreg,
          "status_ocup" = occupationalStatus, 
          "classe_trab" = classWorker, 
          "ocupacao" = isco88,
          "renda_trab" = MainJobIncome2010Values) %>% 
    filter(idade >= 18,
           idade <= 65) %>%                   
  mutate(ocupacao = as.numeric(ocupacao),     # Criando variáveis de ocupações agregada e desagregada
         ocup3dig = trunc(ocupacao/10),
         ocup2dig =  trunc(ocupacao/100),
         ocup1dig = trunc(ocupacao/1000),
         educ = case_when( educ == 1 ~ 1      # Agregando níveis educacionais
                           ,educ == 2 ~ 2
                           ,educ == 3 ~ 2
                           ,educ == 4 ~ 2
                           ,educ == 5 ~ 3
                           ,educ == 6 ~ 3
                           ,educ == 7 ~ 4
                           ,educ == 8 ~ 4
                           ,educ == 9 ~ 5
                           ,educ == 99 ~ 9),
         lf = paste0(educ,areadeestudo))         # Criando variável level-field como junção de nível e área de estudo
  
  # Calculando total linkage geral
  
  indsegtg <- mutual_total(c,
                           group = "ocup3dig",
                           unit = "lf",
                           weight = "peso")
  indsegtg$ano = as.numeric(ano_i)
  


  
  linkage_tg = paste0("\\linkage_tg", ano_i, ".xlsx", sep = "")
  
  export(indsegtg, paste0(here() "linkage_tg.xlsx"))
  
  
  # 1.3 - Calculando  local linkage por nível-área ----
  indseg <- mutual_local(c, 
                         group = "ocup3dig", 
                         unit = "lf", 
                         weight = "peso", 
                         wide = TRUE)

  
  # 1.4 - Produzindo dados descritivos por nível-área ----
  curso <- c %>% 
    group_by(lf) %>% 
    summarise( n = sum(peso),
               perc_homens   = wtd.mean(sexo, peso),
               perc_mulheres = wtd.mean(sexo == 0, peso),
               perc_brancos  = wtd.mean(raça == 1, peso),
               perc_negros   = wtd.mean(raça == 3, peso),
               renda_media   = wtd.mean(renda_trab, peso),
               renda_var     = Hmisc::wtd.var(renda_trab, peso),
               idade_media   = wtd.mean(idade, peso),
               idade_var     = Hmisc::wtd.var(idade, peso)
    ) %>%
    ungroup()
  
  # 1.5 - Juntando local linkage com dados por nível-área ----
  curso <- curso %>% 
    left_join(indseg, by = "lf")
  
  
  
  # 1.6 - Produzindo dados descritivos por nível-área e SEXO ----
  curso_sexo <- c %>% 
    group_by(lf, sexo) %>% 
    summarise( n = sum(peso),
               perc_homens   = wtd.mean(sexo, peso),
               perc_mulheres = wtd.mean(sexo == 0, peso),
               perc_brancos  = wtd.mean(raça == 1, peso),
               perc_negros   = wtd.mean(raça == 3, peso),
               renda_media   = wtd.mean(renda_trab, peso),
               renda_var     = Hmisc::wtd.var(renda_trab, peso),
               idade_media   = wtd.mean(idade, peso),
               idade_var     = Hmisc::wtd.var(idade, peso)
    ) %>%
    ungroup()

  
  # 1.7 - Calculando local linkage para homens ---- 
  cm <- c %>% 
    filter(sexo == 1) %>%
    mutual_local(cm, "ocup3dig", "lf", weight = "peso", wide = TRUE)
    
  cm$sexo = "Male"
  
  # 1.7 - Calculando local linkage para mulheres ---- 

  cf <- c %>% 
    filter(sexo == 0) %>% 
    mutual_local(cf, "ocup3dig", "lf", weight = "peso", wide = TRUE)
    
  cf$sexo = "Female"
  
  # 1.8 - Juntando dados descritivo por nível-área-sexo + local linkage
  curso_sexo = left_join(curso_sexo, bind_rows(cm, cf), by = c("lf", "sexo"))
  
  curso = curso %>% 
    mutate(sexo = NA_real_)
  
  curso = bind_rows(curso, curso_sexo)
  
  curso$ano = as.numeric(ano_i)
  
  rm(c)
  
  export(curso, paste0(here(), arquivo))
  
  gc()
}


